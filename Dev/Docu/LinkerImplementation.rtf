{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\fnil Arial;}}{\colortbl;}\deftab216 \plain\pard \b Implementation Docu\fs16\b0 \par \tab \par \fs20 This is the linker tool for BlackBox on Linux. The code files on Windows and Linux are the same, but the linkers work differently. The linux linker is actually more of a packer. It simply packs object files together and prepends a boot loader written in C. When the application is started the boot loader reads the object files and gives the Kernel the control.\par \par The linux linker does two important things. First, it packs the object files together to one executable thus, only one file is needed. Second, it guarantees that the order in which the object files are packed is the "import order". That is, all imports of any given object file appear before the object file itself in the boot image. (Which implies that the very first object file cannot have any imports at all.)\par \par The file format for the boot image in BNF notation is:\par \pard\tx1133\tx1530 \par Executable\tab = \tab BootLoader BootImg\par BootLoader\tab =\tab ELFExecutable\par Bootimg \tab =\tab Header \{ObjFile\} \par Header\tab =\tab FileTag version4 nofMods4 kernelname mainname newRecFP4 newArrFP4\par FileTag\tab =\tab 3AX 4BX 5CX 6DX\par \par ELFExecutable is a C program compiled in the ELF format and the ObjFile entries are exact copies of the object files passed to the linker.\par \par The ELF executable is copied from the image saved in Lin/Rsrc/exe.img.\par }